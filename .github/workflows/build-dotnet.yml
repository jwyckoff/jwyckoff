name: Build .NET

on:
  workflow_call:
    inputs:
      OUTPUT_FOLDER:
        required: false
        type: string
        default: ./artifacts
      PROJECT_PATH:
        required: false
        type: string
        default: ./src/GitVersionDemo/GitVersionDemo.csproj
      CONFIGURATION:
        required: false
        type: string
        default: Debug

      DOTNET_VERSION:
        required: false
        type: string
        default: 8.0.x

permissions:
  contents: write
  deployments: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  gitVersionJob:
    name: Generate SemVer
    runs-on: ubuntu-latest
    outputs:
      major: ${{ steps.execute-gitversion-step.outputs.major }}
      minor: ${{ steps.execute-gitversion-step.outputs.minor }}
      patch: ${{ steps.execute-gitversion-step.outputs.patch }}
      majorMinor: ${{ steps.execute-gitversion-step.outputs.major }}.${{ steps.execute-gitversion-step.outputs.minor }}
      releaseLabel: ${{ steps.execute-gitversion-step.outputs.major }}.${{ steps.execute-gitversion-step.outputs.minor }}.${{ steps.execute-gitversion-step.outputs.patch }}${{ steps.execute-gitversion-step.outputs.preReleaseTagWithDash }}
      majorMinorReleaseLabel: ${{ steps.execute-gitversion-step.outputs.major }}.${{ steps.execute-gitversion-step.outputs.minor }}${{ steps.execute-gitversion-step.outputs.preReleaseTagWithDash }}
      majorReleaseLabel: ${{ steps.execute-gitversion-step.outputs.major }}${{ steps.execute-gitversion-step.outputs.preReleaseTagWithDash }}
      semVer: ${{ steps.execute-gitversion-step.outputs.semver }}
      shortSha: ${{ steps.execute-gitversion-step.outputs.shortSha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        id: install-gitversion-step
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: "5.x"

      - name: Execute GitVersion
        id: execute-gitversion-step
        uses: gittools/actions/gitversion/execute@v0.10.2

      - name: Print GitVersion
        run: |
          echo "SemVer = ${{ steps.execute-gitversion-step.outputs.semver }}"
          echo "majorMinorReleaseLabel = ${{ steps.execute-gitversion-step.outputs.preReleaseTagWithDash }}"

  buildApplicationJob1:
    name: .NET Build
    needs: gitVersionJob
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}

      #       - name: Build
      # #       run: dotnet build ${{ inputs.PUBLISH_PROJECT_FOLDER }}/${{ inputs.PUBLISH_PROJECT_FILE }} --output ${{inputs.OUTPUT_FOLDER }}/bin --configuration ${{inputs.CONFIGURATION }} /p:Version=${{ needs.gitVersionJob.outputs.semVer }}
      #         run: dotnet build ${{ inputs.PUBLISH_PROJECT_FOLDER }}/${{ inputs.PUBLISH_PROJECT_FILE }} --output ${{inputs.OUTPUT_FOLDER }}/bin --configuration ${{inputs.CONFIGURATION }} /p:Version=${{ needs.gitVersionJob.outputs.semVer }}

      - name: Publish
        run: dotnet publish ${{ inputs.PUBLISH_PROJECT_FOLDER }}/${{ inputs.PUBLISH_PROJECT_FILE }} --output ${{inputs.OUTPUT_FOLDER }}/bin --configuration ${{inputs.CONFIGURATION }} /p:Version=${{ needs.gitVersionJob.outputs.semVer }} --self-contained -r win-x64

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ needs.gitVersionJob.outputs.semVer }}
          path: ${{ inputs.OUTPUT_FOLDER }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.gitVersionJob.outputs.semVer }}
          release_name: Release v${{ needs.gitVersionJob.outputs.semVer }}
          body: |
            Automated release for version ${{ needs.gitVersionJob.outputs.semVer }}.
          draft: false
          prerelease: false

      - name: temp
        id: temp
        run: |
          # list all the files recursive in the output folder
          echo "Output folder: ${{ inputs.OUTPUT_FOLDER }}"
          ls -R ${{ inputs.OUTPUT_FOLDER }}

      # create a step that zips the output folder
      - name: Zip output folder
        run: |
          zip -r ${{ inputs.OUTPUT_FOLDER }}/${{ github.event.repository.name }}-${{ needs.gitVersionJob.outputs.semVer }}.zip ${{ inputs.OUTPUT_FOLDER }}
      - name: Upload binaries to release
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ inputs.OUTPUT_FOLDER }}/${{ github.event.repository.name }}-${{ needs.gitVersionJob.outputs.semVer }}.zip
          asset_name: ${{ github.event.repository.name }}-${{ needs.gitVersionJob.outputs.semVer }}.zip
          asset_content_type: application/zip
